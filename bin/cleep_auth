#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import logging
import sys
from passlib.hash import sha256_crypt
import getopt

CONFIG_FILE = '/etc/cleep/auth.conf'

logging.basicConfig(level=logging.INFO, format="%(message)s")
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

COMMANDS = {'add':'add',
            'del':'del',
            'upd':'update',
            'lst':'list',
            'dsb':'disable',
            'enb':'enable',
            'dft':'default'}
CONFIG = {}

def print_usage():
    logger.info('Usage: cleep_auth -c <command> [-u <username>] [-p <password>]')
    logger.info('Commands:')
    logger.info(' - add : add new user (-u and -p parameters needed)')
    logger.info(' - del : delete user (-u needed)')
    logger.info(' - show : show current configuration')
    logger.info(' - enable : enable authnetication')
    logger.info(' - disable : disable authnetication')
    logger.info(' - default : restore default configuration file')

def save_config():
    global CONFIG
    try:
        fd = open(CONFIG_FILE, 'w')
        fd.write('accounts=%s\n' % str(CONFIG['accounts']))
        fd.write('enabled=%s\n' % str(CONFIG['enabled']))
        fd.close()
    except:
        logger.exception('Unable to write config file "%s"' % CONFIG_FILE)

def cmd_add(user, password):
    """
    Add or update specified user
    """
    global CONFIG
    pwd = sha256_crypt.encrypt(password)
    CONFIG['accounts'][user] = pwd
    logger.info('Account for user "%s" created or updated' % user)
    save_config()

def cmd_del(user):
    global CONFIG
    del CONFIG['accounts'][user]
    logger.info('Account for user "%s" deleted' % user)
    save_config()

def cmd_lst():
    global CONFIG
    if CONFIG['enabled']:
        logger.info('Authentication enabled')
    else:
        logger.info('Authentication disabled')
    logger.info('List of user:')
    if len(CONFIG['accounts'])==0:
        logger.info(' <no user>')
    else:
        for user in CONFIG['accounts'].keys():
            logger.info(' - %s' % user)

def cmd_dsb():
    global CONFIG
    CONFIG['enabled'] = False
    logger.info('Authentication disabled')
    save_config()

def cmd_enb():
    global CONFIG
    CONFIG['enabled'] = True
    logger.info('Authentication enabled')
    save_config()

def cmd_dft():
    global CONFIG
    CONFIG['accounts'] = {}
    CONFIG['enabled'] = False
    logger.info('Default configuration file restored')
    save_config()

def main(argv):
    global COMMANDS, CONFIG
    try:

        #get command line parameters
        command = None
        user = None
        password = None
        opts, args = getopt.getopt(argv,"hc:u:p:",["command=","user=","password="])
        for opt, arg in opts:
            if opt == '-h':
                print_usage()
                return
            elif opt in ('-c', '--command'):
                command = arg
            elif opt in ('-u', '--user'):
                user = arg
            elif opt in ('-p', '--password'):
                password = arg

        #check parameters
        if command not in COMMANDS.values():
            #unknown command
            logger.error('Unknown command "%s" specified' % command)
            print_usage()
            return
        elif command==COMMANDS['dft']:
            #create default conf file
            cmd_dft()
            return
        #load conf file
        execfile(CONFIG_FILE, CONFIG)
        if command not in (COMMANDS['add'], COMMANDS['lst'], COMMANDS['enb'], COMMANDS['dsb'], COMMANDS['dft']) and user not in CONFIG['accounts'].keys():
            #unknown user
            logger.error('Unknown user "%s" specified' % user)
            return
        elif command in (COMMANDS['add'], COMMANDS['upd']) and (not user or not password):
            #missing parameters
            logger.error('Missing parameters for specified command "%s"' % command)
            print_usage()
            return
        elif command in (COMMANDS['del']) and (not user):
            #missing parameters
            logger.error('Missing parameters for specified command "%s"' % command)
            print_usage()
            return

        #execute command
        logger.debug('command=%s user=%s password=%s' % (command, user, password))
        if command in (COMMANDS['add'], COMMANDS['upd']):
            cmd_add(user, password)
        elif command==COMMANDS['del']:
            cmd_del(user)
        elif command==COMMANDS['lst']:
            cmd_lst()
        elif command==COMMANDS['dsb']:
            cmd_dsb()
        elif command==COMMANDS['enb']:
            cmd_enb()
        elif command==COMMANDS['dft']:
            cmd_dft()

    except getopt.GetoptError:
        #usage
        logger.exception('opterror')
        print_usage()

    except:
        logger.exception('Fatal error occured:')

if __name__ == '__main__':
    main(sys.argv[1:])
