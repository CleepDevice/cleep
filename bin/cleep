#! /usr/bin/python3
# -*- coding: utf-8 -*-


from gevent import monkey
monkey.patch_all()
import os
import json
import sys
import getopt
import logging
from logging.config import dictConfig
from threading import Event, Timer, enumerate
from cleep import rpcserver, bus
from cleep.libs.internals.eventsbroker import EventsBroker
from cleep.libs.internals.profileformattersbroker import ProfileFormattersBroker
from cleep import inventory as cleep_inventory
from cleep.libs.configs.cleepconf import CleepConf
from cleep.libs.internals.cleepfilesystem import CleepFilesystem
from cleep.libs.internals.taskfactory import TaskFactory
import importlib
from cleep import __version__ as VERSION
from cleep.libs.internals.crashreport import CrashReport
from cleep.libs.internals.criticalresources import CriticalResources
from cleep.libs.internals.drivers import Drivers
import cleep.libs.internals.tools as tools
from cleep.common import ExecutionStep
from bottle import __version__ as bottle_version
from gevent import __version__ as gevent_version
from passlib import __version__ as passlib_version
from greenlet import __version__ as greenlet_version
from requests import __version__ as requests_version
import time


LOG_FILE = '/var/log/cleep.log'
LOG_SETTINGS = { 
    'version': 1,
    'root': {
        'level': 'INFO',
        'handlers': [],
    },  
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'detailed',
            'stream': 'ext://sys.stdout',
        },  
        'file': {
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'formatter': 'detailed',
            'filename': LOG_FILE,
            'when': 'midnight',
            'interval': 1,
            'backupCount': 7,
            'encoding': 'utf-8'
        }   
    },  
    'formatters': {
        'detailed': {
            'format': '%(asctime)s %(name)-12s[%(filename)s:%(lineno)d] %(levelname)-5s : %(message)s'
        }   
    },  
}
ACTION_TIMEOUT = 8.0
CLEEP_INSTALLED_MODULES_PATH = '/opt/cleep/modules'

class ConfigException(Exception):
    def __init__(self, value):
        self.value = value
    def __str__(self):
        return repr(self.value)


def usage():
    print('Cleep usage: cleep [-d <app names>|--debug=<app names>] [-D|--debugcore] [-t|--trace] [-s|--stdout] [-N|--noro] [-r|--dryrun] [-h|--help]')
    print(' -d|--debug        : enable debug for specified application names (coma separated: "network,system")')
    print(' -D|--debugcore    : enable debug for Cleep core')
    print(' -t|--trace        : enable debug for everything (all modules, all libraries...)')
    print(' -s|--stdout       : dump log in console instead of log file')
    print(' -r|--dryrun       : dry run makes Cleep starts and stops returning exit code that reflects app loading status')
    print(' -N|--noro         : disable completely readonly (so filesystem will always be writable)')
    print(' -h|--help         : this help')


def load_config(cleep_filesystem):
    """
    Load and check configuration file
    @return loaded config
    @raise ConfigException when error occured
    """
    # load config
    conf = CleepConf(cleep_filesystem)
    logger.info('Loading application configuration file "%s"' % conf.CONF)
    conf.check()
    config = conf.as_dict()
    logger.debug('Application config: %s' % config)

    # clear updated modules list
    conf.clear_updated_modules()

    return config

def load_crash_report(debug, disabled):
    """
    Load crash report

    Args:
        disabled (bool): crash report initialized disabled by system

    Returns:
        CrashReport: crash report instance
    """
    libs_version = {
        'bottle': bottle_version,
        'gevent': gevent_version,
        'greenlet': greenlet_version,
        'passlib': passlib_version,
        'requests': requests_version,
    }

    # get sentry token
    sentry_dsn = None
    if 'SENTRY_DSN' in os.environ:
        sentry_dsn = os.environ['SENTRY_DSN']
        logger.debug('Sentry DSN found (%s)' % sentry_dsn)
    else:
        logger.error('No Sentry DSN found, crash report will be disabled')
        disabled = True

    return CrashReport(sentry_dsn, 'CleepDevice', VERSION, libs_version, debug, disabled)

def get_bootstrap_objects(debug, internal_bus, cleep_filesystem, crash_report, rpc_config, app_stop_event):
    """
    Return bootstrap objects.

    Args:
        debug (bool): debug flag
        internal_bus (MessageBus): message bus instance
        cleep_filesystem (CleepFilesystem): cleep filesystem singleton instance
        crash_report (CrashReport): crash report singleton instance
        rpc_config (dict): rpc configuration (port, host, ssl opts)
        app_stop_event (Event): application stop event

    Returns:
        dict: dict of bootstrap objects::

            {
                internal_bus (MessageBus): internal message bus
                events_broker (EventsBroker): events broker
                formatters_broker (ProfileFormattersBroker) : formatters broker
                module_join_event (Threading.Event): module startup join event
                core_join_event: (Threading.Event): core startup join event
                cleep_filesystem (CleepFilesystem): filesystem helper (handle readonly filesystem)
                crash_report (CrashReport): crash report helper
                log_file (string): log file path
                test_mode: test mode flag
                critical_resources (CriticalResources): critical resources handler
                drivers (Drivers): drivers handler
                execution_step (ExecutionStep): cleep execution step
                external_bus (string): module name that holds external bus (only one allowed)
                rpc_config (dict): rpc configuration (port, host, ssl opts)
                app_stop_event (Event): stop event to sync all threads
                task_factory (TaskFactory): Task factory singleton
            }

    """
    bootstrap = {
        'events_broker': EventsBroker(debug),
        'formatters_broker': ProfileFormattersBroker(debug),
        'internal_bus': internal_bus,
        'module_join_event': Event(),
        'core_join_event': Event(),
        'cleep_filesystem': cleep_filesystem,
        'crash_report': crash_report,
        'log_file': LOG_FILE,
        'test_mode': False,
        'critical_resources': None,
        'drivers': Drivers(debug),
        'execution_step': ExecutionStep(),
        'external_bus': None,
        'rpc_config': rpc_config,
        'app_stop_event': app_stop_event,
        'task_factory': None,
    }

    # task factory needs app_stop_event
    bootstrap['task_factory'] = TaskFactory(bootstrap)
    # critical resources needs task_factory
    bootstrap["critical_resources"] = CriticalResources(bootstrap, debug)

    # configure brokers
    bootstrap["events_broker"].configure(bootstrap)
    bootstrap["formatters_broker"].configure(bootstrap)

    return bootstrap

def stop_cleep(debug_core, rpc_server, inventory, internal_bus, app_stop_event):
    """
    Properly stop RPC server

    Args:
        rpc_server (RpcServer): RPC server instance
        inventory (Inventory): Inventory instance
        internal_bus (Bus): internal bus instance
        app_stop_event (Event): application stop event
    """
    app_stop_event.set()
    if inventory:
        inventory.unload_modules()
        inventory.stop()
    if internal_bus:
        internal_bus.stop()

    if debug_core:
        time.sleep(4.0)
        (logger or logging).info('='*10 + 'THREADS' + '='*10)
        for thread in enumerate():
            logger.info('- %s: daemon=%s alive=%s' % (thread.name, thread.daemon, thread.is_alive()))
        (logger or logging).info('='*20)

def dry_run():
    """
    Stop RPC server in dry run
    """
    global logger
    (logger or logging).info('Stop forced by dry-run')

def generate_app_documentation(app_name):
    """
    Generate application documentation (--cidoc command line flag)
    """
    import warnings
    import requests
    warnings.simplefilter("ignore")
    requests.packages.urllib3.disable_warnings()

    global exit_code

    resp = requests.get(f'http://localhost/doc/{app_name}', verify=False)
    resp = resp.json()

    if resp["error"]:
        print(json.dumps({
            "error": resp['message'],
        }))
        exit_code = 1
    else:
        print(json.dumps(resp["data"]))

def check_app_documentation(app_name):
    """
    Check application documentation (--cicheckdoc command line flag)
    """
    import warnings
    import requests
    warnings.simplefilter("ignore")
    requests.packages.urllib3.disable_warnings()

    global exit_code

    resp = requests.get(f'http://localhost/doc/check/{app_name}', verify=False)
    resp = resp.json()

    if resp["error"]:
        exit_code = 1
    else:
        print(json.dumps(resp["data"]))

def get_rpc_config(config, force_http):
    """
    Return rpc config
    Handles invalid ssl config and fallback to http
    """
    ssl_key = config.get("rpc", {}).get("rpc_key")
    ssl_cert = config.get("rpc", {}).get("rpc_cert")
    ssl_enabled = True if ssl_key and ssl_cert and not force_http else False
    auth_enabled = config.get("auth", {}).get("enabled", False)
    auth_accounts = config.get("auth", {}).get("accounts", {})
    host = config.get("rpc", {}).get("rpc_host", "0.0.0.0")
    port_http = config.get('rpc', {}).get('rpc_port', 80)
    port_https = config.get("rpc", {}).get("rpc_ssl_port", 443)
    port = port_https if ssl_enabled and not force_http else port_http
    protocol = "https" if ssl_enabled and not force_http else "http"

    logger.debug('cleep.conf: %s', config)
    if ssl_enabled and (not os.path.exists(ssl_cert) or not os.path.exists(ssl_key)):
        logger.error('Invalid path for key or cert file specified in config. Fallback to HTTP')
        ssl_enabled = False

    return {
        'host': host,
        'port': port,
        'ssl': ssl_enabled,
        'ssl_key': ssl_key,
        'ssl_cert': ssl_cert,
        'auth': auth_enabled and len(auth_accounts) > 0,
        'url': f'{protocol}://{host}:{port}'
    }

def symlink_modules(cleep_filesystem):
    """
    Create symlink from Cleep python module path to installed modules path
    Should not fail Cleep startup so it delete existing modules dir if any

    Args:
        cleep_filesystem (CleepFilesystem): CleepFilesystem instance
    """
    cleep_modules_path = os.path.join(os.path.dirname(rpcserver.__file__), 'modules')
    if os.path.exists(cleep_modules_path) and not os.path.islink(cleep_modules_path):
        # backup existing modules dir that should not exist
        cleep_modules_path_backup = os.path.join(os.path.dirname(rpcserver.__file__), 'modules.backup')
        if os.path.exists(cleep_modules_path_backup):
            cleep_filesystem.rmdir(cleep_modules_path_backup)
        cleep_filesystem.move(cleep_modules_path, cleep_modules_path_backup)

    cleep_filesystem.ln(CLEEP_INSTALLED_MODULES_PATH, cleep_modules_path, force=True)

def execute_command_action(options):
    """
    Process command line actions that requires Cleep to be stopped after execution
    """
    action_timer = None
    if options.get("ci_generate_doc"):
        action_timer = Timer(ACTION_TIMEOUT, generate_app_documentation, [ci_doc_app_name])
    elif options.get("ci_check_doc"):
        action_timer = Timer(ACTION_TIMEOUT, check_app_documentation, [ci_check_doc_app_name])
    elif options.get("dry_run"):
        action_timer = Timer(ACTION_TIMEOUT, dry_run)

    if action_timer:
        action_timer.start()
        rpcserver = options.get("rpcserver")
        stop_timer = Timer(ACTION_TIMEOUT + 2.0, rpcserver.stop)
        stop_timer.start()

if __name__ == '__main__':
    exit_code = 0
    tools.install_trace_logging_level()
    logger = None
    inventory = None
    internal_bus = None
    crash_report = None
    debug_core = False
    force_http = False
    cleep_filesystem = CleepFilesystem()
    app_stop_event = Event()

    try:
        # before everything make sure modules are symlinked to Cleep install dir
        symlink_modules(cleep_filesystem)

        # handle command line parameters
        trace_enabled = False
        readonly_enabled = True
        debug_modules = []
        log_stdout = False
        dry_run = False
        ci_doc_app_name = None
        ci_check_doc_app_name = None
        argv = sys.argv[1:]
        opts, args = getopt.getopt(argv, 'hsd:DtNrvc:C:', ['help', 'stdout', 'debug=', 'debugcore', 'trace', 'noro', 'dryrun', 'version', 'cidoc=', 'cicheckdoc='])
        for opt, arg in opts:
            if opt in ('-h', '--help'):
                usage()
                sys.exit(2)
            elif opt in ('-s', '--stdout'):
                log_stdout = True
            elif opt in ('-d', '--debug'):
                debug_modules = arg.split(',')
            elif opt in ('-D', '--debugcore'):
                debug_core = True
            elif opt in ('-t', '--trace'):
                trace_enabled = True
            elif opt in ('-N', '--noro'):
                readonly_enabled = False
            elif opt in ('-r', '--dryrun'):
                dry_run = True
            elif opt in ('-c', '--cidoc'):
                ci_doc_app_name = arg
                force_http = True
                dry_run = True
            elif opt in ('-C', '--cicheckdoc'):
                ci_check_doc_app_name = arg
                force_http = True
                dry_run = True
            elif opt in ('v', '--version'):
                print(VERSION)
                sys.exit(0)
        
        # configure main logger
        if not log_stdout:
            # log to file
            LOG_SETTINGS['root']['handlers'] = ['file']
        else:
            # log to stdout
            LOG_SETTINGS['root']['handlers'] = ['console']
        if trace_enabled:
            LOG_SETTINGS['root']['level'] = logging.TRACE
        dictConfig(LOG_SETTINGS)
        logger = logging.getLogger('Cleep')
        if any([v is not None for v in [ci_doc_app_name, ci_check_doc_app_name]]):
            # no logging during ci doc
            # logger.setLevel(logging.FATAL)
            pass
        logger.info('========== Cleep v%s started ==========' % VERSION)

        # create cleep filesystem singleton (will be saved in bootstrap context)
        if cleep_filesystem.is_readonly_fs:
            logger.info('Cleep is running on read-only feature enabled filesystem')
        if not readonly_enabled:
            logger.info('Filesystem readonly protection is disabled completely by application!')
            cleep_filesystem.enable_write()

        # load and check config file
        config = load_config(cleep_filesystem)

        # prepare rpc config (shared in bootstrap)
        rpc_config = get_rpc_config(config, force_http)

        # set debug level after config reading
        if config['debug']['trace_enabled']:
            trace_enabled = True
        if config['debug']['debug_core']:
            debug_core = True
        if config['debug']['debug_modules'] and isinstance(config['debug']['debug_modules'], list):
            debug_modules = list(set(config['debug']['debug_modules'])|set(debug_modules))
        if debug_core:
            # enable debug on cleep bin if debug system is enabled
            logger.setLevel(logging.DEBUG)

        # create crash report singleton (will be part of bootstrap objects)
        disable_crash_report = False
        if log_stdout:
            # disable crash report if stdout enabled. It means user is in dev mode
            disable_crash_report = True
        elif 'developer' in config['general']['modules']:
            # disable crash report if developer module installed
            disable_crash_report = True
        crash_report = load_crash_report(trace_enabled or debug_core, disable_crash_report)
        if not crash_report.is_enabled():
            logger.info('Crash report disabled')
        cleep_filesystem.set_crash_report(crash_report)
        tools.install_unhandled_exception_handler(crash_report)

        # create internal message bus (will be part of bootstrap objects)
        logger.debug('Initializing internal message bus')
        debug = False
        if trace_enabled or debug_modules.count('bus')==1:
            debug = True
        internal_bus = bus.MessageBus(crash_report, debug)

        # force debug state
        debug = False
        if trace_enabled or debug_core:
            debug = True

        # build bootstrap objects collection
        bootstrap = get_bootstrap_objects(
            debug,
            internal_bus,
            cleep_filesystem,
            crash_report,
            rpc_config,
            app_stop_event,
        )

        # create inventory
        logger.debug('Initializing inventory')
        debug = False
        if trace_enabled or debug_modules.count('inventory')==1:
            debug = True
        inventory = cleep_inventory.Inventory(
            bootstrap,
            rpcserver,
            debug,
            config['general']['modules'],
            {
                'trace_enabled': trace_enabled,
                'debug_modules': debug_modules,
            }
        )
        inventory.start()

        # wait for inventory starts all modules
        startup_succeed = inventory.wait_for_apps_started()
        if dry_run and not startup_succeed:
            raise Exception('Cleep starts with errors. Stop here')
        logger.info('Inventory is ready and all applications are loaded')
        logger.info('External bus is handled by "%s" application' % bootstrap['external_bus'])

        # unlock bus and launch webserver (blocking)
        logger.info('Cleep running...')
        internal_bus.app_configured(bootstrap["task_factory"])
        debug = trace_enabled or debug_modules.count('rpc') == 1
        rpcserver.configure(rpc_config, bootstrap, inventory, debug)

        execute_command_action({
            "inventory": inventory,
            "internal_bus": internal_bus,
            "rpcserver": rpcserver,
            "dry_run": dry_run,
            "ci_generate_doc": ci_doc_app_name,
            "ci_check_doc": ci_check_doc_app_name,
        })

        rpcserver.start()

    except getopt.GetoptError as error:
        exit_code = 128
        print("Command line error: %s\n" % error)
        usage()

    except SystemExit:
        pass
 
    except Exception as error:
        exit_code = 1
        (logger or logging).exception('Exception during startup:')

    # clean all stuff
    (logger or logging).info('Stopping Cleep core')
    stop_cleep(debug_core, rpcserver, inventory, internal_bus, app_stop_event)
    (logger or logging).info('Cleep stopped [%d]', exit_code)

    sys.exit(exit_code)

