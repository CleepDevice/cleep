#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import sys
import getopt
import logging
from logging.config import dictConfig
from raspiot.rpcserver import app
from raspiot import bus
from raspiot import RaspIot
import importlib

WEBSERVER_HOST = '0.0.0.0'
WEBSERVER_PORT = 80
CONFIG_FILE = 'raspiot.conf'
LOG_FILE = '/var/log/raspiot.log'
LOG_SETTINGS = { 
    'version': 1,
    'root': {
        'level': 'INFO',
        'handlers': [],
    },  
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'detailed',
            'stream': 'ext://sys.stdout',
        },  
        'file': {
            'class': 'logging.handlers.RotatingFileHandler',
            'formatter': 'detailed',
            'filename': LOG_FILE,
            'mode': 'a',
            'maxBytes': 10485760,
            'backupCount': 5,
        }   
    },  
    'formatters': {
        'detailed': {
            'format': '%(asctime)s %(name)s[%(lineno)d] %(levelname)s : %(message)s'
        }   
    },  
}

def usage():
    print("RaspIot usage: raspiot [-d|--debug] [-s|--stdout [-h|--help]]")
    print(" -d|--debug  : enable debug log level")
    print(" -s|--stdout : dump log in console instead of log file")
    print(" -h|--help   : this help")

if __name__ == '__main__':
    logger = None
    try:
        #handle command line parameters
        log_level = logging.INFO
        log_stdout = False
        argv = sys.argv[1:]
        opts, args = getopt.getopt(argv,"hsd", ['help','stdout','debug'])
        for opt, arg in opts:
            if opt in ('-h','--help'):
                usage()
                sys.exit(2)
            elif opt in ('-s','--stdout'):
                log_stdout = True
            elif opt in ('-d','--debug'):
                log_level = logging.DEBUG
        
        #configure main logger
        LOG_SETTINGS['root']['level'] = log_level
        if not log_stdout:
            #log to file
            LOG_SETTINGS['root']['handlers'] = ['file']
        else:
            #log to stdout
            LOG_SETTINGS['root']['handlers'] = ['console']
        dictConfig(LOG_SETTINGS)
        logger = logging.getLogger(__name__)

        #load config file
        config_path = os.path.join(RaspIot.CONFIG_DIR, CONFIG_FILE)
        logger.debug('Loading configuration file %s' % config_path)
        config = {}
        execfile(config_path, config)

        #create message bus
        logger.debug('Creating message bus')
        bus = bus.MessageBus()
        app.config['sys.bus'] = bus

        #load user modules
        logger.debug('Loading user modules:')
        loaded_modules = []
        for module_name in config['modules']:
            logger.debug(' - %s)' % (module_name));

            #get module class
            logger.debug('   - loading module...')
            module_ = importlib.import_module('raspiot.%s' % module_name)
            class_ = getattr(module_, module_name.capitalize())

            #load dependencies
            logger.debug('   - loading module dependencies:')
            deps = class_.DEPS
            if deps:
                for dep in deps:
                    if dep not in loaded_modules:
                        logger.debug('     - loading dependency "%s"' % dep)
                        dep_ = importlib.import_module('raspiot.%s' % dep)
                        dep_class_ = getattr(dep_, dep.capitalize())
                        app.config['lib.%s' % dep] = dep_class_(bus)
                    
                        logger.debug('     - starting dependency...')
                        logger.debug('===============BEGIN %s===============', dep)
                        app.config['lib.%s' % dep] = dep_class_(bus)
                        app.config['lib.%s' % dep].start()
                        logger.debug('===============END %s===============', dep)
                    
            #and run instance
            logger.debug('   - starting module...')
            logger.debug('---------------BEGIN %s---------------', module_name)
            app.config['mod.%s' % module_name] = class_(bus)
            app.config['mod.%s' % module_name].start()
            logger.debug('---------------END %s---------------', module_name)
            loaded_modules.append(module_name)

        #launch bus and webserver (blocking)
        logger.info('Raspiot running...')
        bus.app_configured()
        app.run(server='gevent', host=WEBSERVER_HOST, port=WEBSERVER_PORT, quiet=True, debug=False, reloader=False)

    except getopt.GetoptError:
        #display usage
        usage()
 
    except:
        logger.exception('Exception on main:')

    #clean all stuff
    if logger:
        logger.debug('Stopping user modules:')
    for module in app.config:
        if module[:3] in ['mod']:
            if logger:
                logger.debug(' - %s' % module)
            app.config[module].stop()
    for module in app.config:
        if module[:3] in ['lib']:
            if logger:
                logger.debug(' - %s' % module)
            app.config[module].stop()
    for module in app.config:
        if module[:3] in ['sys']:
            if logger:
                logger.debug(' - %s' % module)
            app.config[module].stop()
    
    if logger:
        logger.info('Raspiot stopped')
