#! /usr/bin/python
# -*- coding: utf-8 -*-

import os
import sys
import getopt
import logging
from logging.config import dictConfig
from raspiot.raspiot import RaspIot
from raspiot import rpcserver
from raspiot import bus
import importlib

CONFIG_FILE = 'raspiot.conf'
LOG_FILE = '/var/log/raspiot.log'
LOG_SETTINGS = { 
    'version': 1,
    'root': {
        'level': 'INFO',
        'handlers': [],
    },  
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'detailed',
            'stream': 'ext://sys.stdout',
        },  
        'file': {
            'class': 'logging.handlers.RotatingFileHandler',
            'formatter': 'detailed',
            'filename': LOG_FILE,
            'mode': 'a',
            'maxBytes': 10485760,
            'backupCount': 5,
        }   
    },  
    'formatters': {
        'detailed': {
            'format': '%(asctime)s %(name)-12s[%(lineno)-4d] %(levelname)-5s : %(message)s'
        }   
    },  
}

class ConfigException(Exception):
    def __init__(self, value):
        self.value = value
    def __str__(self):
        return repr(self.value)


def usage():
    print("RaspIot usage: raspiot [-d|--debug] [-s|--stdout [-h|--help]]")
    print(" -d|--debug  : enable debug log level")
    print(" -s|--stdout : dump log in console instead of log file")
    print(" -h|--help   : this help")


def load_config():
    """
    Load and check configuration file
    @return loaded config
    @raise ConfigException when error occured
    """
    #load config
    config_path = os.path.join(RaspIot.CONFIG_DIR, CONFIG_FILE)
    logger.info('Loading configuration file %s' % config_path)
    config = {}
    execfile(config_path, config)

    #check config
    keys = ['modules', 'webserver_host', 'webserver_port', 'webserver_key', 'webserver_cert']
    for key in keys:
        if not config.has_key(key):
            raise ConfigException('Missing "%s" parameter in %s' % (key, config_path))

    return config


if __name__ == '__main__':
    logger = None
    app = None
    try:
        #handle command line parameters
        debug_enabled = False
        log_level = logging.INFO
        log_stdout = False
        argv = sys.argv[1:]
        opts, args = getopt.getopt(argv,"hsd", ['help','stdout','debug'])
        for opt, arg in opts:
            if opt in ('-h','--help'):
                usage()
                sys.exit(2)
            elif opt in ('-s','--stdout'):
                log_stdout = True
            elif opt in ('-d','--debug'):
                debug_enabled = True
                log_level = logging.DEBUG
        
        #configure main logger
        if not log_stdout:
            #log to file
            LOG_SETTINGS['root']['handlers'] = ['file']
        else:
            #log to stdout
            LOG_SETTINGS['root']['handlers'] = ['console']
        dictConfig(LOG_SETTINGS)
        logger = logging.getLogger('Raspiot')

        #load and check config file
        config = load_config()

        #set debug level after config reading
        if config['debug_enabled']:
            debug_enabled = True
        if debug_enabled:
            logger.setLevel(logging.DEBUG)

        #get webserver app (used to store application objects)
        app = rpcserver.get_app()

        #create message bus
        logger.debug('Creating message bus')
        debug = False
        if debug_enabled and (len(config['debug_modules'])==0 or config['debug_modules'].count('bus')==1):
            debug = True
        bus = bus.MessageBus(debug)
        app.config['sys.bus'] = bus

        #load user modules
        logger.debug('Loading user modules:')
        loaded_modules = {}
        for module_name in config['modules']:
            logger.debug(' - %s:' % (module_name));

            #check if not already loaded
            if module_name in loaded_modules.keys():
                #update module name if necessary
                if loaded_modules[module_name]:
                    #module already loaded as library, set loaded as module
                    logger.debug('   - Module already loaded as library. Set it as module')
                    app.config['mod.%s' % module_name] = app.config.pop('lib.%s' % module_name)
                    loaded_modules[module_name] = False
                else:
                    logger.debug('   - Module already loaded')
                continue

            #get module class
            logger.debug('   - loading module...')
            module_ = importlib.import_module('raspiot.modules.%s' % module_name)
            class_ = getattr(module_, module_name.capitalize())

            #load dependencies
            logger.debug('   - loading module dependencies:')
            if class_.MODULE_DEPS:
                for dep in class_.MODULE_DEPS:
                    if dep not in loaded_modules.keys():
                        logger.debug('     - loading dependency "%s"' % dep)
                        dep_ = importlib.import_module('raspiot.modules.%s' % dep)
                        dep_class_ = getattr(dep_, dep.capitalize())
                    
                        logger.debug('     - starting dependency...')
                        logger.debug('===============BEGIN %s===============', dep)
                        debug = False
                        if debug_enabled and (len(config['debug_modules'])==0 or config['debug_modules'].count(dep)==1):
                            logger.debug('Debug enabled for this module')
                            debug = True
                        app.config['lib.%s' % dep] = dep_class_(bus, debug)
                        app.config['lib.%s' % dep].start()
                        logger.debug('===============END %s===============', dep)
                        loaded_modules[dep] = True
                    
            #and run instance
            logger.debug('   - starting module...')
            logger.debug('---------------BEGIN %s---------------', module_name)
            debug = False
            if debug_enabled and (len(config['debug_modules'])==0 or config['debug_modules'].count(module_name)==1):
                logger.debug('Debug enabled for this module')
                debug = True
            app.config['mod.%s' % module_name] = class_(bus, debug)
            app.config['mod.%s' % module_name].start()
            logger.debug('---------------END %s---------------', module_name)
            loaded_modules[module_name] = False

        #launch bus and webserver (blocking)
        logger.info('Raspiot running...')
        bus.app_configured()
        rpcserver.start(config['webserver_host'], config['webserver_port'], config['webserver_key'], config['webserver_cert'])

    except getopt.GetoptError:
        #display usage
        usage()
 
    except:
        logger.exception('Exception on main:')

    #clean all stuff
    if logger:
        logger.debug('Stopping user modules:')
    if app:
        for module in app.config:
            if module[:3] in ['mod']:
                if logger:
                    logger.debug(' - %s' % module)
                app.config[module].stop()
        for module in app.config:
            if module[:3] in ['lib']:
                if logger:
                    logger.debug(' - %s' % module)
                app.config[module].stop()
        for module in app.config:
            if module[:3] in ['sys']:
                if logger:
                    logger.debug(' - %s' % module)
                app.config[module].stop()
    
    if logger:
        logger.info('Raspiot stopped')
