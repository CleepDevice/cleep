#! /usr/bin/python
# -*- coding: utf-8 -*-

import os
import sys
import getopt
import logging
from logging.config import dictConfig
from raspiot.raspiot import RaspIot
from raspiot.eventsFactory import EventsFactory
from raspiot.formattersFactory import FormattersFactory
from raspiot import rpcserver, bus, inventory
from raspiot.modules import system, cleepbus, network
from raspiot.libs.configs.raspiotconf import RaspiotConf
from raspiot.libs.internals.cleepfilesystem import CleepFilesystem
import importlib
from raspiot import __version__ as VERSION
from threading import Event

LOG_FILE = u'/var/log/raspiot.log'
LOG_SETTINGS = { 
    u'version': 1,
    u'root': {
        u'level': u'INFO',
        u'handlers': [],
    },  
    u'handlers': {
        u'console': {
            u'class': u'logging.StreamHandler',
            u'formatter': u'detailed',
            u'stream': u'ext://sys.stdout',
        },  
        u'file': {
            u'class': u'logging.handlers.RotatingFileHandler',
            u'formatter': u'detailed',
            u'filename': LOG_FILE,
            u'mode': u'a',
            u'maxBytes': 10485760,
            u'backupCount': 5,
            u'encoding': u'utf-8'
        }   
    },  
    u'formatters': {
        u'detailed': {
            u'format': u'%(asctime)s %(name)-12s[%(filename)s:%(lineno)d] %(levelname)-5s : %(message)s'
        }   
    },  
}

class ConfigException(Exception):
    def __init__(self, value):
        self.value = value
    def __str__(self):
        return repr(self.value)


def usage():
    print(u'RaspIot usage: raspiot [-d|--debug] [-s|--stdout [-h|--help]]')
    print(u' -d|--debug  : enable debug log level')
    print(u' -s|--stdout : dump log in console instead of log file')
    print(u' -h|--help   : this help')


def load_config(cleep_filesystem):
    """
    Load and check configuration file
    @return loaded config
    @raise ConfigException when error occured
    """
    #load config
    logger.info(u'Loading configuration raspiot.conf file')
    conf = RaspiotConf(cleep_filesystem)
    conf.check()
    config = conf.as_dict()
    logger.info(u'config: %s' % config)

    #clear updated modules list
    conf.clear_updated_modules()

    return config

def get_bootstrap_objects(message_bus, events_factory, formatters_factory, cleep_filesystem):
    """
    Return bootstrap objects.

    Args:
        message_bus (MessageBus): message bus instance
        events_factory (EventsFactory): events factory instance
        formatters_factory (FormattersFactory): formatters factory instance
        cleep_filesystem (CleepFilesystem): cleep filesystem singleton instance

    Return:
        dict: dict of bootstrap objects::
            {
                message_bus (MessageBus): internal message bus
                events_factory (EventsFactory): events factory
                formatters_factory (FormattersFactory) : formatters factory
                join_event (Threading.Event): module startup join event
                cleep_filesystem (CleepFilesystem): filesystem helper (handle readonly filesystem)
            }
    """
    bootstrap = {
        u'events_factory': events_factory,
        u'formatters_factory': formatters_factory,
        u'message_bus': message_bus,
        u'join_event': Event(),
        u'cleep_filesystem': cleep_filesystem
    }

    return bootstrap


if __name__ == u'__main__':
    logger = None
    app = None
    mandatory_modules = {
        u'system': system.System,
        u'cleepbus': cleepbus.Cleepbus,
        u'network': network.Network
    }
    try:
        #handle command line parameters
        join_events = []
        trace_enabled = False
        debug_modules = []
        debug_system = False
        log_level = logging.INFO
        log_stdout = False
        argv = sys.argv[1:]
        opts, args = getopt.getopt(argv, u'hsd:Dt', [u'help', u'stdout', u'debug=', u'debugsystem', u'trace'])
        for opt, arg in opts:
            if opt in (u'-h', u'--help'):
                usage()
                sys.exit(2)
            elif opt in (u'-s', u'--stdout'):
                log_stdout = True
            elif opt in (u'-d', u'--debug'):
                debug_modules = arg.split(u',')
            elif opt in (u'-D', u'--debugsystem'):
                debug_system = True
            elif opt in (u'-t', u'--trace'):
                trace_enabled = True
                log_level = logging.DEBUG
        
        #configure main logger
        if not log_stdout:
            #log to file
            LOG_SETTINGS[u'root'][u'handlers'] = [u'file']
        else:
            #log to stdout
            LOG_SETTINGS[u'root'][u'handlers'] = [u'console']
        dictConfig(LOG_SETTINGS)
        logger = logging.getLogger(u'Raspiot')

        #create cleep filesystem singleton (will be saved in bootstrap context)
        cleep_filesystem = CleepFilesystem()

        #load and check config file
        config = load_config(cleep_filesystem)

        #set debug level after config reading
        if config[u'debug'][u'trace_enabled']:
            trace_enabled = True
        if config[u'debug'][u'debug_system']:
            debug_system = True
        if config[u'debug'][u'debug_modules'] and isinstance(config[u'debug'][u'debug_modules'], list):
            debug_modules = list(set(config[u'debug'][u'debug_modules'])|set(debug_modules))
        if debug_system:
            #enable debug on raspiot bin if debug system is enabled
            logger.setLevel(logging.DEBUG)

        #create message bus
        logger.debug(u'Initializing message bus')
        debug = False
        if trace_enabled or debug_modules.count(u'bus')==1:
            debug = True
        bus = bus.MessageBus(debug)

        #create factories
        debug = False
        if trace_enabled or debug_system:
            debug = True
        events_factory = EventsFactory(debug)
        formatters_factory = FormattersFactory(debug)

        #build bootstrap objects collection
        bootstrap = get_bootstrap_objects(bus, events_factory, formatters_factory, cleep_filesystem)

        #configure factories and rpcserver
        events_factory.configure(bootstrap)
        formatters_factory.configure(bootstrap)

        #create inventory
        logger.debug(u'Initializing inventory')
        debug = False
        if trace_enabled or debug_modules.count(u'inventory')==1:
            debug = True
        inventory = inventory.Inventory(bootstrap, debug, config[u'general'][u'modules'], {u'trace_enabled': trace_enabled, u'debug_modules':debug_modules})
        inventory.start()
        logger.info(u'Inventory is ready (all modules are loaded)')

        #unlock bus and launch webserver (blocking)
        logger.info(u'Raspiot running...')
        bus.app_configured()
        debug = False
        if trace_enabled or debug_modules.count(u'rpc')==1:
            debug = True
        rpcserver.configure(bootstrap, inventory, debug)
        rpcserver.start(config[u'rpc'][u'rpc_host'], config[u'rpc'][u'rpc_port'], config[u'rpc'][u'rpc_key'], config[u'rpc'][u'rpc_cert'])

    except getopt.GetoptError:
        #display usage
        usage()
 
    except:
        logger.exception(u'Exception on main:')

    #clean all stuff
    if logger:
        logger.debug(u'Stopping modules')
    inventory.unload_modules()
    
    if logger:
        logger.info(u'Raspiot stopped')

