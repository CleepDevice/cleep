#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import logging
from raspiot.rpcserver import app
from raspiot import bus
from raspiot import RaspIot
import importlib

WEBSERVER_HOST = '0.0.0.0'
WEBSERVER_PORT = 80
CONFIG_FILE = 'raspiot.conf'

logging.basicConfig(level=logging.INFO, format="%(asctime)s %(name)s %(levelname)s : %(message)s")
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

if __name__ == '__main__':
    try:
        #load config file
        config_path = os.path.join(RaspIot.CONFIG_DIR, CONFIG_FILE)
        logger.debug('Loading configuration file %s' % config_path)
        config = {}
        execfile(config_path, config)

        #create message bus
        logger.debug('Creating message bus')
        bus = bus.MessageBus()
        app.config['sys.bus'] = bus

        #load user modules
        logger.debug('Loading user modules:')
        for module in config['modules']:
            (module_flag, module_name) = module.split('.')
            logger.debug(' - %s (with flag "%s")' % (module_name, module_flag));

            #create module instance
            logger.debug('   - loading module...')
            module_ = importlib.import_module('raspiot.%s' % module_name)
            class_ = getattr(module_, module_name.capitalize())

            #and run instance
            logger.debug('   - starting module...')
            logger.debug('---------------BEGIN %s---------------', module_name)
            app.config[module] = class_(bus)
            app.config[module].start()
            logger.debug('---------------END %s---------------', module_name)

        #check module dependencies
        #TODO

        #launch bus and webserver (blocking)
        logger.info('App running...')
        bus.app_configured()
        app.run(server='gevent', host=WEBSERVER_HOST, port=WEBSERVER_PORT, quiet=True, debug=False, reloader=False)

    except:
        logger.exception('Exception on main:')

    #clean all stuff
    logger.debug('Stopping user modules:')
    for module in app.config:
        if module[:3] in ['sys', 'ext', 'lib']:
            logger.debug(' - %s' % module)
            app.config[module].stop()
    

    logger.info('App stopped')
