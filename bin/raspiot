#! /usr/bin/python
# -*- coding: utf-8 -*-

import os
import sys
import getopt
import logging
from logging.config import dictConfig
from raspiot.raspiot import RaspIot
from raspiot.eventsFactory import EventsFactory
from raspiot.formattersFactory import FormattersFactory
from raspiot import rpcserver, bus, inventory
from raspiot.modules import system, cleepbus, network
from raspiot.libs.raspiotconf import RaspiotConf
from raspiot.libs.cleepfilesystem import CleepFilesystem
import importlib
from raspiot import __version__ as VERSION
from threading import Event

LOG_FILE = u'/var/log/raspiot.log'
LOG_SETTINGS = { 
    u'version': 1,
    u'root': {
        u'level': u'INFO',
        u'handlers': [],
    },  
    u'handlers': {
        u'console': {
            u'class': u'logging.StreamHandler',
            u'formatter': u'detailed',
            u'stream': u'ext://sys.stdout',
        },  
        u'file': {
            u'class': u'logging.handlers.RotatingFileHandler',
            u'formatter': u'detailed',
            u'filename': LOG_FILE,
            u'mode': u'a',
            u'maxBytes': 10485760,
            u'backupCount': 5,
            u'encoding': u'utf-8'
        }   
    },  
    u'formatters': {
        u'detailed': {
            u'format': u'%(asctime)s %(name)-12s[%(filename)s:%(lineno)d] %(levelname)-5s : %(message)s'
        }   
    },  
}

class ConfigException(Exception):
    def __init__(self, value):
        self.value = value
    def __str__(self):
        return repr(self.value)


def usage():
    print(u'RaspIot usage: raspiot [-d|--debug] [-s|--stdout [-h|--help]]')
    print(u' -d|--debug  : enable debug log level')
    print(u' -s|--stdout : dump log in console instead of log file')
    print(u' -h|--help   : this help')


def load_config():
    """
    Load and check configuration file
    @return loaded config
    @raise ConfigException when error occured
    """
    #load config
    logger.info(u'Loading configuration raspiot.conf file')
    conf = RaspiotConf()
    conf.check()
    config = conf.as_dict()
    logger.info(u'config: %s' % config)

    return config

def get_bootstrap_objects(message_bus, events_factory, formatters_factory, cleep_filesystem):
    """
    Return bootstrap objects.

    Args:
        message_bus (MessageBus): message bus instance
        events_factory (EventsFactory): events factory instance
        formatters_factory (FormattersFactory): formatters factory instance

    Return:
        dict: dict of bootstrap objects::
            {
                message_bus (MessageBus): internal message bus
                events_factory (EventsFactory): events factory
                formatters_factory (FormattersFactory) : formatters factory
                join_event (Threading.Event): module startup join event
                fs (Filesystem): filesystem helper (handle readonly filesystem)
            }
    """
    bootstrap = {
        u'events_factory': events_factory,
        u'formatters_factory': formatters_factory,
        u'message_bus': message_bus,
        u'join_event': Event(),
        u'fs': cleep_filesystem
    }

    return bootstrap


if __name__ == u'__main__':
    logger = None
    app = None
    mandatory_modules = {
        u'system': system.System,
        u'cleepbus': cleepbus.Cleepbus,
        u'network': network.Network
    }
    try:
        #handle command line parameters
        join_events = []
        debug_enabled = False
        log_level = logging.INFO
        log_stdout = False
        argv = sys.argv[1:]
        opts, args = getopt.getopt(argv, u'hsd', [u'help', u'stdout', u'debug'])
        for opt, arg in opts:
            if opt in (u'-h', u'--help'):
                usage()
                sys.exit(2)
            elif opt in (u'-s', u'--stdout'):
                log_stdout = True
            elif opt in (u'-d', u'--debug'):
                debug_enabled = True
                log_level = logging.DEBUG
        
        #configure main logger
        if not log_stdout:
            #log to file
            LOG_SETTINGS[u'root'][u'handlers'] = [u'file']
        else:
            #log to stdout
            LOG_SETTINGS[u'root'][u'handlers'] = [u'console']
        dictConfig(LOG_SETTINGS)
        logger = logging.getLogger(u'Raspiot')

        #load and check config file
        config = load_config()

        #set debug level after config reading
        if config[u'debug'][u'debug_enabled']:
            debug_enabled = True
        if debug_enabled:
            logger.setLevel(logging.DEBUG)

        #get webserver app (used to store application objects)
        debug = False
        if debug_enabled and config[u'debug'][u'debug_modules'].count(u'rpcserver')==1:
            debug = True
        app = rpcserver.get_app(debug)

        #create message bus
        logger.debug(u'Initializing message bus')
        debug = False
        if debug_enabled and config[u'debug'][u'debug_modules'].count(u'bus')==1:
            debug = True
        bus = bus.MessageBus(debug)
        app.config[u'sys.bus'] = bus

        #create bootstrap objects
        events_factory = EventsFactory(debug_enabled)
        formatters_factory = FormattersFactory(debug_enabled)
        cleep_filesystem = CleepFilesystem()

        #build bootstrap objects collection
        bootstrap = get_bootstrap_objects(bus, events_factory, formatters_factory, cleep_filesystem)

        #configure factories
        events_factory.configure(bootstrap)
        formatters_factory.configure(bootstrap)

        #create system module by default (needed to handle raspberry config)
        for module_name in mandatory_modules.keys():
            logger.debug(u'Initializing %s module' % module_name)
            debug = False
            if debug_enabled and config[u'debug'][u'debug_modules'].count(module_name)==1:
                debug = True
            join_events.append(bootstrap[u'join_event'])
            instance_ = mandatory_modules[module_name](bootstrap, debug)
            app.config[u'mod.%s' % module_name] = instance_
            instance_.start()

        #load user modules
        logger.debug(u'Loading user modules:')
        loaded_modules = {}
        for module_name in config[u'general'][u'modules']:
            logger.debug(u' - %s:' % (module_name));

            #check if not already loaded
            if module_name in loaded_modules.keys():
                #update module name if necessary
                if loaded_modules[module_name]:
                    #module already loaded as library, set loaded as module
                    logger.debug(u'   - Module already loaded as library. Set it as module')
                    app.config[u'mod.%s' % module_name] = app.config.pop(u'lib.%s' % module_name)
                    loaded_modules[module_name] = False
                else:
                    logger.debug(u'   - Module already loaded')
                continue

            #get module class
            logger.debug(u'   - loading module...')
            module_ = importlib.import_module(u'raspiot.modules.%s' % module_name)
            class_ = getattr(module_, module_name.capitalize())

            #load dependencies
            logger.debug(u'   - loading module dependencies:')
            if class_.MODULE_DEPS:
                for dep in class_.MODULE_DEPS:
                    if dep not in loaded_modules.keys():
                        logger.debug(u'     - loading dependency "%s"' % dep)
                        dep_ = importlib.import_module(u'raspiot.modules.%s' % dep)
                        dep_class_ = getattr(dep_, dep.capitalize())
                    
                        logger.debug(u'     - starting dependency...')
                        logger.debug(u'===============BEGIN %s===============', dep)
                        debug = False
                        if debug_enabled and (len(config[u'debug'][u'debug_modules'])==0 or config[u'debug'][u'debug_modules'].count(dep)==1):
                            logger.debug(u'Debug enabled for this module')
                            debug = True
                        join_events.append(bootstrap[u'join_event'])
                        app.config[u'lib.%s' % dep] = dep_class_(bootstrap, debug)
                        app.config[u'lib.%s' % dep].start()
                        logger.debug(u'===============END %s===============', dep)
                        loaded_modules[dep] = True
                    
            #and run instance
            logger.debug(u'   - starting module...')
            logger.debug(u'---------------BEGIN %s---------------', module_name)
            debug = False
            if debug_enabled and (len(config[u'debug'][u'debug_modules'])==0 or config[u'debug'][u'debug_modules'].count(module_name)==1):
                logger.debug(u'Debug enabled for this module')
                debug = True
            join_events.append(bootstrap[u'join_event'])
            app.config[u'mod.%s' % module_name] = class_(bootstrap, debug)
            app.config[u'mod.%s' % module_name].start()
            logger.debug(u'---------------END %s---------------', module_name)
            loaded_modules[module_name] = False

        #wait for all modules completely loaded
        logger.debug('Waiting for end of module loading...')
        for join_event in join_events:
            join_event.wait()
        logger.debug('All modules are loaded')

        #create inventory at end because it needs to know installed modules
        logger.debug(u'Initializing inventory')
        debug = False
        if debug_enabled and (len(config[u'debug'][u'debug_modules'])==0 or config[u'debug'][u'debug_modules'].count(u'inventory')==1):
            debug = True
        join_events.append(bootstrap[u'join_event'])
        inv = inventory.Inventory(bootstrap, debug, app.config)
        app.config[u'sys.inventory'] = inv
        inv.start()

        #unlock bus and launch webserver (blocking)
        logger.info(u'Raspiot running...')
        bus.app_configured()
        rpcserver.start(config[u'rpc'][u'rpc_host'], config[u'rpc'][u'rpc_port'], config[u'rpc'][u'rpc_key'], config[u'rpc'][u'rpc_cert'])

    except getopt.GetoptError:
        #display usage
        usage()
 
    except:
        logger.exception(u'Exception on main:')

    #clean all stuff
    if logger:
        logger.debug(u'Stopping user modules:')
    if app:
        for module in app.config:
            if module[:3] in [u'mod']:
                if logger:
                    logger.debug(u' - %s' % module)
                app.config[module].stop()
        for module in app.config:
            if module[:3] in [u'lib']:
                if logger:
                    logger.debug(u' - %s' % module)
                app.config[module].stop()
        for module in app.config:
            if module[:3] in [u'sys']:
                if logger:
                    logger.debug(u' - %s' % module)
                app.config[module].stop()
    
    if logger:
        logger.info(u'Raspiot stopped')

