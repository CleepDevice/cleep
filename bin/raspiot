#! /usr/bin/python
# -*- coding: utf-8 -*-

import os
import sys
import getopt
import logging
from logging.config import dictConfig
from threading import Event
from raspiot.raspiot import RaspIot
from raspiot.eventsFactory import EventsFactory
from raspiot.formattersFactory import FormattersFactory
from raspiot import rpcserver, bus
from raspiot import inventory as raspiot_inventory
from raspiot.libs.configs.raspiotconf import RaspiotConf
from raspiot.libs.internals.cleepfilesystem import CleepFilesystem
import importlib
from raspiot import __version__ as VERSION
from raspiot.libs.internals.crashreport import CrashReport
import raspiot.libs.internals.tools as tools

from netifaces import version as netifaces_version
from bottle import __version__ as bottle_version
from gevent import __version__ as gevent_version
from urllib3 import __version__ as urllib3_version
from psutil import __version__ as psutil_version
from passlib import __version__ as passlib_version
from pyre_gevent import __version__ as pyregevent_version

LOG_FILE = u'/var/log/raspiot.log'
LOG_SETTINGS = { 
    u'version': 1,
    u'root': {
        u'level': u'INFO',
        u'handlers': [],
    },  
    u'handlers': {
        u'console': {
            u'class': u'logging.StreamHandler',
            u'formatter': u'detailed',
            u'stream': u'ext://sys.stdout',
        },  
        u'file': {
            u'class': u'logging.handlers.TimedRotatingFileHandler',
            u'formatter': u'detailed',
            u'filename': LOG_FILE,
            u'when': u'midnight',
            u'interval': 1,
            u'backupCount': 7,
            u'encoding': u'utf-8'
        }   
    },  
    u'formatters': {
        u'detailed': {
            u'format': u'%(asctime)s %(name)-12s[%(filename)s:%(lineno)d] %(levelname)-5s : %(message)s'
        }   
    },  
}

class ConfigException(Exception):
    def __init__(self, value):
        self.value = value
    def __str__(self):
        return repr(self.value)


def usage():
    print(u'RaspIot usage: raspiot [-d <module names>|--debug=<modules names>][-D|--debugsystem] [-t|--trace] [-s|--stdout] [-N|--noro] [-h|--help]]')
    print(u' -d|--debug        : enable debug for specified module names (coma separated: "network,system")')
    print(u' -D|--debugsystem  : enable debug for RaspIot core')
    print(u' -t|--trace        : enable debug for all RaspIot (all modules, all libraries...)')
    print(u' -s|--stdout       : dump log in console instead of log file')
    print(u' -N|--noro         : disable completely readonly (so filesystem will always be writable)')
    print(u' -h|--help         : this help')


def load_config(cleep_filesystem):
    """
    Load and check configuration file
    @return loaded config
    @raise ConfigException when error occured
    """
    #load config
    conf = RaspiotConf(cleep_filesystem)
    logger.info(u'Loading application configuration file "%s"' % conf.CONF)
    conf.check()
    config = conf.as_dict()
    logger.debug(u'Application config: %s' % config)

    #clear updated modules list
    conf.clear_updated_modules()

    return config

def load_crash_report(debug, disabled):
    """
    Load crash report

    Args:
        disabled (bool): crash report initialized disabled by system

    Returns:
        CrashReport: crash report instance
    """
    libs_version = {
        u'netifaces': netifaces_version,
        u'bottle': bottle_version,
        u'gevent': gevent_version,
        u'urllib3': urllib3_version,
        u'psutil': psutil_version,
        u'passlib': passlib_version,
        u'pyregevent': pyregevent_version
    }

    #get sentry token
    sentry_dsn = None
    if u'SENTRY_DSN' in os.environ:
        sentry_dsn = os.environ[u'SENTRY_DSN']
        logger.debug(u'Sentry DSN found (%s)' % sentry_dsn)
    else:
        logger.error(u'No Sentry DSN found, crash report will be disabled')
        disabled = True

    return CrashReport(sentry_dsn, u'CleepDevice', VERSION, libs_version, debug, disabled)

def get_bootstrap_objects(message_bus, events_factory, formatters_factory, cleep_filesystem, crash_report):
    """
    Return bootstrap objects.

    Args:
        message_bus (MessageBus): message bus instance
        events_factory (EventsFactory): events factory instance
        formatters_factory (FormattersFactory): formatters factory instance
        cleep_filesystem (CleepFilesystem): cleep filesystem singleton instance
        crash_report (CrashReport): crash report singleton instance

    Return:
        dict: dict of bootstrap objects::
            {
                message_bus (MessageBus): internal message bus
                events_factory (EventsFactory): events factory
                formatters_factory (FormattersFactory) : formatters factory
                join_event (Threading.Event): module startup join event
                cleep_filesystem (CleepFilesystem): filesystem helper (handle readonly filesystem)
                crash_report (CrashReport): crash report helper
                log_file (string): log file path
                test_mode: test mode flag
            }
    """
    bootstrap = {
        u'events_factory': events_factory,
        u'formatters_factory': formatters_factory,
        u'message_bus': message_bus,
        u'join_event': Event(),
        u'cleep_filesystem': cleep_filesystem,
        u'crash_report': crash_report,
        u'log_file': LOG_FILE,
        u'test_mode': False
    }

    return bootstrap



if __name__ == u'__main__':
    tools.install_trace_logging_level()
    logger = None
    inventory = None
    crash_report = None

    try:
        #handle command line parameters
        join_events = []
        trace_enabled = False
        readonly_enabled = True
        debug_modules = []
        debug_system = False
        log_stdout = False
        argv = sys.argv[1:]
        opts, args = getopt.getopt(argv, u'hsd:DtN', [u'help', u'stdout', u'debug=', u'debugsystem', u'trace', u'noro'])
        for opt, arg in opts:
            if opt in (u'-h', u'--help'):
                usage()
                sys.exit(2)
            elif opt in (u'-s', u'--stdout'):
                log_stdout = True
            elif opt in (u'-d', u'--debug'):
                debug_modules = arg.split(u',')
            elif opt in (u'-D', u'--debugsystem'):
                debug_system = True
            elif opt in (u'-t', u'--trace'):
                trace_enabled = True
            elif opt in (u'-N', u'--noro'):
                readonly_enabled = False
        
        #configure main logger
        if not log_stdout:
            #log to file
            LOG_SETTINGS[u'root'][u'handlers'] = [u'file']
        else:
            #log to stdout
            LOG_SETTINGS[u'root'][u'handlers'] = [u'console']
        if trace_enabled:
            LOG_SETTINGS[u'root'][u'level'] = logging.TRACE
        dictConfig(LOG_SETTINGS)
        logger = logging.getLogger(u'Raspiot')

        #create cleep filesystem singleton (will be saved in bootstrap context)
        cleep_filesystem = CleepFilesystem()
        if cleep_filesystem.is_readonly:
            logger.info(u'Cleep is running on read-only feature enabled filesystem')
        if not readonly_enabled:
            logger.info(u'Filesystem readonly protection is disabled completely by application!')
            cleep_filesystem.enable_write()

        #load and check config file
        config = load_config(cleep_filesystem)

        #set debug level after config reading
        if config[u'debug'][u'trace_enabled']:
            trace_enabled = True
        if config[u'debug'][u'debug_system']:
            debug_system = True
        if config[u'debug'][u'debug_modules'] and isinstance(config[u'debug'][u'debug_modules'], list):
            debug_modules = list(set(config[u'debug'][u'debug_modules'])|set(debug_modules))
        if debug_system:
            #enable debug on raspiot bin if debug system is enabled
            logger.setLevel(logging.DEBUG)

        #create crash report singleton (will be part of bootstrap objects)
        disable_crash_report = False
        if log_stdout:
            #disable crash report if stdout enabled. It means user is in dev mode
            disable_crash_report = True
        #elif trace_enabled or debug_system:
        #    #disable crash report if full debug enabled
        #    disable_crash_report = True
        crash_report = load_crash_report(trace_enabled or debug_system, disable_crash_report)
        if not crash_report.is_enabled():
            logger.info(u'Crash report disabled')
        cleep_filesystem.set_crash_report(crash_report)

        #create message bus (will be part of bootstrap objects)
        logger.debug(u'Initializing message bus')
        debug = False
        if trace_enabled or debug_modules.count(u'bus')==1:
            debug = True
        bus = bus.MessageBus(crash_report, debug)

        #create factories (will be part of bootstrap objects)
        debug = False
        if trace_enabled or debug_system:
            debug = True
        events_factory = EventsFactory(debug)
        formatters_factory = FormattersFactory(debug)

        #build bootstrap objects collection
        bootstrap = get_bootstrap_objects(bus, events_factory, formatters_factory, cleep_filesystem, crash_report)

        #configure factories
        events_factory.configure(bootstrap)
        formatters_factory.configure(bootstrap)

        #create inventory
        logger.debug(u'Initializing inventory')
        debug = False
        if trace_enabled or debug_modules.count(u'inventory')==1:
            debug = True
        inventory = raspiot_inventory.Inventory(bootstrap, rpcserver, debug, config[u'general'][u'modules'], {u'trace_enabled': trace_enabled, u'debug_modules':debug_modules})
        inventory.start()
        logger.info(u'Inventory is ready and all modules are loaded')

        logger.trace(u'===============TRACE=================')

        #unlock bus and launch webserver (blocking)
        logger.info(u'Raspiot running...')
        bus.app_configured()
        debug = False
        if trace_enabled or debug_modules.count(u'rpc')==1:
            debug = True
        rpcserver.configure(bootstrap, inventory, debug)
        rpcserver.start(config[u'rpc'][u'rpc_host'], config[u'rpc'][u'rpc_port'], config[u'rpc'][u'rpc_key'], config[u'rpc'][u'rpc_cert'])

    except getopt.GetoptError:
        #display usage
        usage()

    except SystemExit:
        #drop
        pass
 
    except:
        if logger:
            logger.exception(u'Exception on main:')
        else:
            logging.exception(u'Exception on main:')

    #clean all stuff
    if logger:
        logger.debug(u'Stopping modules')
    if inventory:
        inventory.unload_modules()
    
    if logger:
        logger.info(u'Raspiot stopped')

