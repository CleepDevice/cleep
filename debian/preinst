#!/bin/bash

# https://wiki.debian.org/MaintainerScripts

set -e

MODULES_JSON_LATEST=https://raw.githubusercontent.com/CleepDevice/cleep-apps/main/modules.json
MODULES_JSON_VERSION=https://raw.githubusercontent.com/CleepDevice/cleep-apps/v__CLEEP_VERSION__/modules.json
CLEEPMODS=( audio cleepbus network parameters system update )

# Check command result
# $1: command result (usually $?)
# $2: awaited command result
checkResult() {
    if [ $1 -ne $2 ]
    then
        echo ""
        echo "Error occured. Please check command output."
        exit 1
    fi  
}

installDefaultApps() {
    # download modules.json from Cleep repository
    echo "Download versionned modules.json from $MODULES_JSON_VERSION"
    wget $MODULES_JSON_VERSION -q --show-progress -O /tmp/modules.json
    if [ $? -ne 0 ]; then
        echo "Download latest modules.json from $MODULES_JSON_LATEST"
        wget $MODULES_JSON_LATEST -q --show-progress -O /tmp/modules.json
    fi
    checkResult $? 0 "Unable to download modules.json file"
    # copy modules.json to cleep repository to Cleep be able to start without network
    mkdir -p /etc/cleep
    cp -a /tmp/modules.json /etc/cleep/modules.json
    # install mandatory Cleep apps
    mkdir -p /opt/cleep/html
    for CLEEPMOD in "${CLEEPMODS[@]}"; do
        echo
        echo "=> Installing $CLEEPMOD module"
        # download and checksum module
        download=`cat /tmp/modules.json | /usr/bin/jq .list.$CLEEPMOD.download | awk '{ gsub("\"","",$0); print $0}'`
        checksum=`cat /tmp/modules.json | /usr/bin/jq .list.$CLEEPMOD.sha256 | awk '{ gsub("\"","",$0); print $0}'`
        wget $download -q --show-progress -O /tmp/cleepmod.zip
        echo "$checksum /tmp/cleepmod.zip" > /tmp/cleepmod.sha
        checkResult $? 0 "Unable to create sha file"
        sha256sum --quiet -c /tmp/cleepmod.sha
        checkResult $? 0 "Checksum does not match for current app"
        # install module
        unzip -q -o -d /tmp/cleepmod /tmp/cleepmod.zip
        checkResult $? 0 "Unzip failed"
        cp -a /tmp/cleepmod/backend/* /opt/cleep/
        checkResult $? 0 "Backend copy failed"
        if [ -d "/tmp/cleepmod/frontend/" ]; then
            cp -a /tmp/cleepmod/frontend/* /opt/cleep/html/
            checkResult $? 0 "Frontend copy failed"
        fi
        if [ -f "/tmp/cleepmod/scripts/postinst.sh" ]; then
            echo " - running postinst.sh script"
            chmod +x /tmp/cleepmod/scripts/postinst.sh
            cd /tmp/cleepmod/scripts/
            /tmp/cleepmod/scripts/postinst.sh
            checkResult $? 0 "Postinst.sh script failed"
            cd -
        fi
        rm -rf /tmp/cleepmod
        rm -f /tmp/cleepmod.zip
        rm -f /tmp/cleepmod.sha
        echo "Done"
        echo ""
    done
    rm -f /tmp/modules.json
}

case "$1" in
    install | upgrade)
        # install pip (or upgrade if necessary)
        echo "Installing pip..."
        wget -q --no-check-certificate "https://bootstrap.pypa.io/get-pip.py" -O /tmp/get-pip.py
        checkResult $? 0
        python3 /tmp/get-pip.py --trusted-host pypi.python.org
        checkResult $? 0
        rm -f /tmp/get-pip.py
        echo "Done"
        echo ""

        # install python dependencies
        echo "Installing python dependencies..."
        python3 -m pip install --no-cache-dir --trusted-host pypi.python.org __CLEEP_REQUIREMENTS__
        checkResult $? 0
        echo "Done"
        echo ""

        # ensure folder structure to install apps
        mkdir -p /opt/cleep/modules
        touch /opt/cleep/modules/__init__.py

        # install default apps
        if [[ $CLEEP_ENV != "ci" ]]; then
            installDefaultApps
        else
            echo "Ci env: default applications are not installed"
        fi
        ;;

    *)
        echo "preinst called with unknown argument '$1'" >&2
        ;;
esac

#DEBHELPER#

exit 0

