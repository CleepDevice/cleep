__TIME_EVENT = {
    'time': {
        'type': 'integer',
        'desc': 'Current timestamp (seconds)'
    },
    'year': {
        'type': 'integer',
        'desc': 'Current year'
    },
    'month': {
        'type': 'integer',
        'desc': 'Current month'
    },
    'day': {
        'type': 'integer',
        'desc': 'Current day'
    },
    'hour': {
        'type': 'integer',
        'desc': 'Current hour'
    },
    'minute': {
        'type': 'integer',
        'desc': 'Current minute'
    },
    'weekday': {
        'type': 'integer',
        'desc': 'Current weekday (monday=0)'
    },
    'weekday_literal': {
        'type': 'string',
        'desc': 'Current weekday (in english)'
    }
}

__GPIO_EVENT = {
    'gpio': {
        'type': 'integer',
        'desc': 'Turned on gpio'
    },
    'init': {
        'type': 'boolean',
        'desc': 'Configuration event'
    }
}

EVENTS = {
    'event.gpio.on': __GPIO_EVENT,
    'event.gpio.off': __GPIO_EVENT,
    'event.time.now': __TIME_EVENT,
    'event.time.sunset': __TIME_EVENT,
    'event.time.sunrise': __TIME_EVENT,
}


#============================================


__GPIOS_PARAMS = {
    'gpio': {
        'type': 'string',
        'desc': 'Name of gpio (ie GPIO3)',
    }
}

__SHUTTER_PARAMS = {
    'name': {
        'type': 'string',
        'desc': 'Name of shutter',
    }
}

COMMANDS = {
    'gpios': {
        'turn_on': {
            'desc': 'Turn on gpio',
            'params' : __GPIOS_PARAMS
        },
        'turn_off': {
            'desc': 'Turn off gpio',
            'params' : __GPIOS_PARAMS
        },
        'is_on': {
            'desc': 'Is gpio on?',
            'params' : __GPIOS_PARAMS
        }
    },
    'shutter': {
        'open_shutter': {
            'desc': 'Open shutter',
            'params' : __SHUTTER_PARAMS
        },
        'close_shutter': {
            'desc': 'Close shutter',
            'params' : __SHUTTER_PARAMS
        },
        'stop_shutter': {
            'desc': 'Stop shutter',
            'params' : __SHUTTER_PARAMS
        }
    },
    'sound': {
        'get_volume': {
            'desc': 'Return current volume',
            'return': {
                'volume': {
                    'type': 'integer',
                    'desc': 'Volume value'
                }
            }
        },
        'set_volume': {
            'desc': 'Set volume',
            'params': {
                'volume': {
                    'type': 'integer',
                    'desc': 'Volume'
                }
            }
        },
        'play_sound': {
            'desc': 'Play sound',
            'params': {
                'filepath': {
                    'type': 'string',
                    'desc': 'Complete file path to play'
                }
            }
        },
        'say_text': {
            'desc': 'Say text in specified lang',
            'params': {
                'text': {
                    'type': 'string',
                    'desc': 'Text to say'
                },
                'lang': {
                    'type': 'string',
                    'desc': 'Lang to use to say text'
                }
            }
        }
    },
    'messageboard': {
        'set_speed': {
            'desc': 'Set message speed',
            'params': {
                'duration': {
                    'type': 'integer',
                    'desc': 'Scrolling message speed'
                }
            }
        },
        'get_speed': {
            'desc': 'Get message speed',
            'params': {},
            'return': {
                'volume': {
                    'type': 'integer',
                    'desc': 'Scrolling message speed'
                }
            }
        },
        'turn_on': {
            'desc': 'Turn on board',
            'params': {}
        },
        'turn_off': {
            'desc': 'Turn off board',
            'params': {}
        },
        'set_duration': {
            'desc': 'Set message duration',
            'params': {
                'duration': {
                    'type': 'integer',
                    'desc': 'Message duration'
                }
            }
        },
        'get_duration': {
            'desc': 'Get message duration',
            'params': {},
            'return': {
                'volume': {
                    'type': 'integer',
                    'desc': 'Message duration'
                }
            }
        },
        'add_message': {
            'desc': 'Add new message',
            'params': {
                'message': {
                    'type': 'string',
                    'desc': 'Message'
                },
                'start': {
                    'type': 'datetime',
                    'desc': 'Datetime when message starts to be displayed'
                },
                'end': {
                    'type': 'datetime',
                    'desc': 'Datetime when message stops to be displayed'
                }
            },
            'return': {
                'uuid': {
                    'type': 'string',
                    'desc': 'Message id'
                }
            }
        },
        'delete_message': {
            'desc': 'Delete message',
            'params': {
                'uuid': {
                    'type': 'string',
                    'desc': 'Message id'
                }
            },
            'return': {
                'deleted': {
                    'type': 'boolean',
                    'desc': 'Deletion status'
                }
            }
        },
        'replace_message': {
            'desc': 'Replace message',
            'params': {
                'uuid': {
                    'type': 'string',
                    'desc': 'Message id'
                },
                'message': {
                    'type': 'string',
                    'desc': 'Message'
                },
                'start': {
                    'type': 'datetime',
                    'desc': 'Datetime when message starts to be displayed'
                },
                'end': {
                    'type': 'datetime',
                    'desc': 'Datetime when message stops to be displayed'
                }
            },
            'return': {
                'uuid': {
                    'type': 'string',
                    'desc': 'Message id'
                }
            }
        },
    },
    'sensors': {
        'get_sensors': {
            'desc': 'Return configured sensors',
            'params': {},
            'return': {
                'sensors': {
                    'desc': 'List of sensors',
                    'type': 'array'
                }
            }
        },
        'get_onewire_devices': {
            'desc': 'Get onewire devices',
            'params': {},
            'return': {
                'devices': {
                    'desc': 'List of onewire devices',
                    'type': 'array'
                }
            }
        },
        'add_ds18b20': {
            'desc': 'Add onewire temperature sensor (DS18B20)',
            'params': {
                'name': {
                    'desc': 'Sensor name',
                    'type': 'string'
                },
                'path': {
                    'desc': 'Device path',
                    'type': 'string'
                },
                'duration': {
                    'desc': 'Time between temperature scan',
                    'type': 'integer'
                }
            },
            'return': {
                'added': {
                    'desc': 'Addition status',
                    'type': 'boolean'
                }
            }
        },
        'add_motion': {
            'desc': 'Add motion sensor',
            'params': {
                'name': {
                    'desc': 'Sensor name',
                    'type': 'string'
                },
                'gpio': {
                    'desc': 'Gpio used by sensor',
                    'type': 'string'
                },
                'reverted': {
                    'desc': 'Sensor state is reverted',
                    'type': 'boolean'
                }
            },
            'return': {
                'added': {
                    'desc': 'Addition status',
                    'type': 'boolean'
                }
            }
        },
        'delete_sensor': {
            'desc': 'Delete sensor',
            'params': {
                'name': {
                    'desc': 'Sensor name',
                    'type': 'string'
                }
            },
            'return': {
                'deleted': {
                    'desc': 'Deletion status',
                    'type': 'boolean'
                }
            }
        }
    }
}
